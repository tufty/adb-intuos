ADB Intuos notes.

Identification word seems to be the same format as for the Ultrapads - .. .. xx xx yy yy .. ..

Identifiable by having 00 07 as the last two bytes, and by being set to handler 6a

Origin appears to be top left (makes sense).  

We get a continuous stream of packets even if the tool stays stationary.  

Stream starts with 2 packet that are *always* 7 bytes followed by (if there's time, a packet of) 8 bytes, and is always of the form 

80 82 x9 91 01 4f e0
Ax xx xx xx xx xx xx xx

The first packet seems to be an "in proximity" tool indicator.  With the standard stylus, the "x" is 0x2 when we're dealing with the tip, 0xa when we're dealing with the eraser.  Pressure, tilt or buttons don't seem to change it.

Breakdown:

80 TT T9 91 01 4f e0

TTT is Tool ID, as follows:

TTT & 0xFF7 == 0x822 : Standard Stylus
TTT & 0xFF7 == 0x812 : Inking Stylus
TTT & 0xFF7 == 0x832 : Stroke Stylus
TTT & 0xFF7 == 0x842 : Grip Stylus
TTT & 0xFF7 == 0x912 : Airbrush
TTT & 0xFF7 == 0x094 : 4D Mouse
TTT & 0xFF7 == 0x096 : Lens Cursor

TTT & 0x008 == 0x008 : Tool inverted (eraser)

To get a more general tool type, 

TTT & 0xf06 == 0x802 : Stylus
TTT & 0xf06 == 0x902 : Airbrush
TTT & 0xf06 == 0x004 : Mouse
TTT & 0xF06 == 0x006 : Puck

The trailing bytes don't change for my tablet, but are different for Bernard's.  Tablet ID, maybe.  Wacom docs suggest that the unique toolID is, in fact, 32 bits long - suggest the following interpretation:

80 TT TI II II II Ix

Where TTT is the tooltype and II... is the ToolID.

ToolID is only unique within tooltype, giving us a unique toolID from the concatention of the two.

The second packet encodes the "starting point" location.  

Breakdown:

AB XX XX YY YY nn nn nn

XXXX = x location
YYYY = y location

Resolution for 0608-A is 4f60 - 3f70

B is related to buttons, and only active for tip proximity (buttons not detected for eraser)

0bx000 = No buttons
0bx010 = Side button 1 pressed on entry
0bx100 = Side button 2 pressed on entry

Top bit is either set or not, doesn't seem consistent with a particular button state.  Turns out it's the "proximity" or "touching" indicator.

Hypothesis :

Pressure is 1024 levels for all tools (and for scrollwheels).  Tilt is +-60 degrees. This can be encoded in 3 bytes. 

Wacom docs suggest:

Pressure : 0 <= n <= 1024
Tilt : -60 <= n <= 60
Rotation (4D Mouse) : 10.6 fixed notation, 0 <= n <= 360
Barrel Pressure (airbrush wheel) : -1024 <= n <= 1024
Z Axis (4D Mouse thumbwheel) : -1024 <= n <= 1024

First 10 bits appear to be pressure, naively encoded.

Next 7 bits x axis tilt.  zero -> maximum left, 7f -> maximum right
Next 7 bits y axis tilt.  zero -> maximum away from user, 7f -> maximum towards

encoding of last 3 bytes of 8 byte message
pppppppp ppxxxxxx xyyyyyyy


Stream continues with 3 and 6 byte packets, format unknown, and occasional 8 byte packets of the form 

Ax xx xx xx xx xx xx xx

These 8 byte packets appear to be of the same form as the initial entry packets. They are definitely triggered by changes of button state, but not pressure.

There are occasionally other 8 byte packets *not* starting with 0xa.  These appear to be triggered at the edges of the digitizer area if we go slowly enough.  Haven't looked into what they contain yet.

Hypothesis : 3 and 6 byte packets deal with most common changes in pointing device state - location, pressure and tilt. "uncommon" changes, i.e. button state changes, necessitate a "full" packet.

3 byte packets.

Bit 21 appears to correspond to a leftwards stroke.  Sign of X delta?
Bit 16 appears to correspond to upwards stroke.  Sign of Y delta?
- bits 12-16 Y delta?
- bits 17-21 X delta?

bits 0-3 y tilt delta ?
bits 4-7 x tilt delta ?
bits 8-11 pressure delta ?

Are x and y "deltas" 2's complement, or sign + data?  *very* slow movement in the "negative" direction results in the "sign" bit being set, and low values in the lsbs.  If we were dealing with 2's  or 1's complement, we'd expect to see lots of 0b11111 fields.  I postulate sign + some other coding.

..xxxxxy yyyy.... ........

Is what I'm assuming as pressure data instead a pair of multiplier / shift indicators for co-ordinates?  slow pen-up passes produce zeros here, fast ones put data in.  Sometimes.  I'm not sure it's pressure.

Some kind of delta modulation seems likely.

6 byte packets

Appear to be simply a pair of 3 byte packets.  There is scaling involved, however, as simply adding the values doesn't get a correct result.  multiplications of one or other packet by a constant power of 2 (to get a constant-scaled 8 bit delta) doesn't work either.

signs are consistent for first and second "packets" within a 6 byte packet.  For a right-left swipe, all x "deltas" are -ve, for example

Stream appears to consist of a number of 6 byte packets, with 3 byte packets every now and then (1 per 3-6 packets in normal circumstances).  

Hypothesis : 3 byte packets are "error correction" packets.
Against : eg on a left-right stroke, we might expect to see 3 byte packets with a -ve x delta when we "overshoot".  Haven't seen any of these.
For : If not, why bother with the 6 and 3 byte packet mix? Wacom couldn't physically get 200 samples/sec with ADB, why bother encoding 2 samples in one 6 byte packet in order to "fake" it? Nobody sees the samples, anyway, unless the driver is extrapolating time from the packets, which seems unlikely.

If they *are* error correction packets, they should be triggered by a threshold on the samples we're sending.  Can't see the original samples, though : cannot test. Can't see anything relevant in the 6-byte packets either. Have looked for (for example) cumulative bottom 2 bits per axis in 6-byte packets exceeds threshold (16, 32, etc) but found nothing concrete.

If the 6 byte packets are simply 2x3 byte packets, we're almost certainly looking at some sort of adaptive delta encoding.

** Well, Bernard got his o-scope out, and it appears that the 6 byte packets are simply 2 3 byte packets munged together in order to get the advertised 200pps - and they *do* hit that target, seems like Wacom care(d) about truth in advertising...

So, 6 byte packets are simply 2 3 byte packets munged together.  We also see occasional 8 byte packets which appear to be 2 3 byte packets *plus* something else.  I've not seen a corresponding 5 byte packet (yet), could be the 2 bytes of "something else" are a last ditch attempt to keep up with the 200pps target (i.e. just the x and y offsets with (maybe) pressure information)

Stream ends with any packet whose last 2 bytes are FE 00 (usually simply 2 bytes, but sometimes 5 or 8 bytes with a 3 or  6 byte "extra" content packet first)

Encoding, from reverse-engineering the Wacom driver.

3 byte packets ...

..XXXXXY YYYYPPPP xxxxyyyy

XXXXX - X delta encoding
YYYYY - Y delta encoding
PPPP  - Pressure delta encoding
xxxx  - X tilt delta encoding
yyyy  - Y tilt delta encoding

Tilt decoding
=============

Tilt is encoded using a delta method with adaptive scaling.  The driver has a persistent "tilt shift" state for each axis, as follows:

void decode_tilt (uint8_t encoding, int8_t * tilt_shift, uint16_t * tilt) {
  uint8_t delta_magnitude = encoding & 0x07;
  uint16_t delta = delta_magnitude << *tilt_shift;
  if (encoding & 0x08) {
    *tilt -= delta;
  } else {
    *tilt += delta;
  }
  switch (delta_magnitude) {
    case 0%000:
      *tilt_shift -= 3; break;
    case 0%001:
      *tilt_shift -= 2; break;
    case 0%010:
    case 0%011:
      *tilt_shift -= 1; break;
    case 0%100:
    case 0%101:
      break;
    case 0%110:
      *tilt_shift += 1; break;
    case 0%111:
      *tilt_shift += 2; break;
  }
  if (*tilt_shift < 0) *tilt_shift = 0;
}

Initial tilt value comes from "in proximity" packet, tilt_shift is reset to 0x02.

Pressure encoding
=================

Similar to tilt encoding, athough slightly more complex.  In addition to the shift value, we also have a flag.

Location encoding
=================

Same story, different constants

void decode_location (uint8_t encoding, int8_t * shift, uint16_t * location) {
  uint8_t magnitude = encoding & 0xf;
  uint16_t delta = magnitude << *shift;

  if (encoding & 0x10) {
    *location -= delta;
  } else {
    *location += delta;
  }

  switch (magnitude) {
  case 0:
    *shift -= 2; break;
  case 1: case 2: case 3: case 4: case 5: case 6: case 7:
    *shift -= 1; break;
  case 15:
    *shift += 2; break;
  }
		   
  if (*shift < 0) *shift = 0;
}

clip to 0 <= location <= 0xffff (that's how Wacom do it, although it's probably better to clip to tablet resolution).  Initial location value comes from proximity packet, shift must be reset to 0x04 on every 8 byte packet;

Even sustained and careful-not-to-reset penning (a minute or more) keeps the error factor down to 9 bits on my 6x8, that corresponds to 2.5% error.  Pretty good going for such a simple algorithm, and more than usable, I'd say.

My error estimation is wrong!  I wasn't handling the events properly.  Need to re-calculate.

31/12/2104
==========

Right, with a bit more digging.

The tablet can handle 2 separate tools at once.  Not sure quite what happens if we introduce a 3rd, I'll give it a try (my suspicion is that the third tool will be ignored).

When a tool enters into proximity, we get a 7-byte packet with the top byte at 0b100txxxx where t is the tool index.

This is followed by a (number of) "large" packet(s) which give the intial values for location, tilt, etc.  The high bit for these packets are always set.  Reverse-engineering appears to show that we will only have one or two of these.  The large packets we receive give the order of the delta packets we receive subsequently.

The standard stylus only ever sends one large packet, starting with 0xA... This packet encodes location, tilt, pressure and stylus button state, and is followed by a series of delta packets.  These have the high bit set to 0, and may be packed in ADB packets of either 3 bytes (one "full" delta), 5 bytes (one "full" delta and one location /pressure delta), 6 bytes (2 "full" deltas), or 8 bytes (2 "full" deltas and one location / pressure delta).  Button state changes cause a new "large" packet, and reset the delta state machine.

The packing of these delta packets is to keep up the 200pps overall sample rate.  Some tools send (at least some) 2 byte deltas (not "truncated" deltas) as a matter of course.  Basically, we can't go on adb packet length to deduce delta types (a 6 byte packet might be 2 3-byte deltas or 3 2-byte deltas, depending on tool type, or even a 6 byte large packet).

The stream for a given tool ends with a 2 byte packet (either 0xfe00 or 0xff00), bit 16 giving the tool index.  This packet may well be catenated with other delta packets.

All packets have a bit given over to tool index.  I assume that the streams for multiple tools are interleaved one way or another (but presumably not guaranteed to be a 1:1 interleave, or this bit would be extraneous - the driver could keep its own state without the device having to care, and it would save a bit, which wacom have been rather parsimonious with).  This does guarantee that the device and driver are operating "in lockstep", as it were, though, and that deltas aren't being misinterpreted as what they aren't.

For a tool requiring too much data per delta to fit in (at most) 3 bytes and guarantee 200pps (for example, the airbrush tool gives location, x and y tilt, pressure and barrel pressure), we will alternate between delta packet formats. Need to sniff various tools to work this out.  My guess would be that we get multiple packet types for airbrush, 4d mouse (location, buttons, rotation, wheel / Z axis) and stroke stylus if they are supported on intuos (location, tilt, pressure, rotation).  All delta packets encode *at least* location.

Wacom's intuos driver code allows for the packet stream to start in any arbitrary order, the state machine is very generic.  It even allows for subsequent large packets to occur mid-stream, after deltas have been received.  Not sure if this latter is necessary.  Do I replicate this or do I bypass it, writing state machines per tool type?  Probably need to wait untl I get my 4d mouse to see.

Pressure sensitivity has an additional flag variable, I believe this corresponds to the tip click threshold.  I don't think we need to worry about this on the AVR, as it should be dealt with "host-side" by the official wacom driver.

There are a few types of delta data encodings.

5 bits (sign + 4 bits) location delta (x or y) giving 0 <= n <= ffff
4 bits (sign + 3 bits) pressure delta giving 0 <= n <= 3ff
4 bits (sign + 3 bits) tilt delta giving 0 <= n <= 7f
4 bits (overall sign + sign + 2 bits) rotation delta giving -707 <= n <= 707 (0x707 = 1799, i.e +- 180 degrees in tenths of a degree)
4 bits (sign + 3 bits) barrel pressure delta giving 0 <= n <= 3ff
4 bits (sign + 3 bits) z axis delta giving 0 <= n <= 3ff

4d mouse enters with an [89]... packet, follows with an f[cd]... packet, an f[0123]... packet, and then a sequence of interleaved delta packet.  I think the order of packets starts with the *last* major state packet, as opposed to starting with the first major state packet.  I'm certainly seeing major stte packets in the order "pressure" (wheel) followed by "rotation & buttons", and deltas in the other order.

A midstream major state packet appears to reset the delta state stream.
